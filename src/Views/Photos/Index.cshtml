@{
	Layout = "_PhotoLayout";

	string deleteUrl = Url.Action("DeletePhotos", new {
		familyId = Model.FamilyId
	});

	string subTitle = Model.DateLabel;

	if (!string.IsNullOrWhiteSpace(Model.CameraModel))
		subTitle += ", " + Model.CameraModel;
}

@model PhotoSite.Models.Photos_Index_AspModel;

@section Header {
	<div class="header-label">
		<div>@Model.FamilyName - Photos</div>
		<small>@subTitle</small>
	</div>
}

@section Sidebar {
	<div id="photo-list-sidebar">
		<div class="sidebar-section collapsible-sidebar-section">
			<a href="/" class="sidebar-section-title">üè† Home Page</a>
		</div>

		<div class="sidebar-section collapsible-sidebar-section">
			<label for="year-collapsible" class="sidebar-section-title">üóìÔ∏è Date Taken</label>
			<input type="checkbox" id="year-collapsible" />

			<div class="collapsible-sidebar-links padding-bottom-halfrem" id="nav">
				@foreach (var year in Model.Sidebar) {
					string yearClass = "sidebar-section inner-sidebar-section";

					if (year.Label == $"{Model.Year}")
						yearClass += " selected-sidebar-section";

					<text>
						<div class="@yearClass">
							<a class="sidebar-section-title" href="@year.Url">@year.Label</a>

							@if (year.Children != null && year.Children.Count > 0) {
								<text>
									<ul>
										@foreach (var month in year.Children) {
											string monthClass = "";

											if (month.Url.Contains($"{Model.Year}/{Model.Month}"))
												monthClass = "selected-sidebar-item";

											<text>
												<li class="@monthClass"><a class="sidebar-section-item month-link" href="@month.Url">@month.Label</a></li>
											</text>
										}
									</ul>
								</text>
							}
						</div>
					</text>
				}
			</div>
		</div>

		@{
			string cameraModelSectionClass = "sidebar-section collapsible-sidebar-section";

				if (!string.IsNullOrWhiteSpace(Model.CameraModel))
					cameraModelSectionClass += " selected-sidebar-section";
		}

		<div class="@cameraModelSectionClass">
			<label for="camera-model-collapsible" class="sidebar-section-title">üì∑ Camera Model</label>
			<input type="checkbox" id="camera-model-collapsible" />

			<ul class="collapsible-sidebar-links" id="camera-models">
				@{
					string allCameraModelsClass = "";

					if (string.IsNullOrWhiteSpace(Model.CameraModel))
						allCameraModelsClass = "selected-sidebar-item";
				}

				<li class="@allCameraModelsClass">
					<a class="sidebar-section-item" href="?cameraModel=">All Camera Models</a>
				</li>

				@foreach (var cameraModel in Model.CameraModels) {
					string cameraModelClass = "";

					if (cameraModel == Model.CameraModel)
						cameraModelClass = "selected-sidebar-item";

					<text>
						<li class="@cameraModelClass">
							<a class="sidebar-section-item" href="?cameraModel=@cameraModel">@cameraModel</a>
						</li>
					</text>
				}
			</ul>
		</div>

		@if (Model.CanDeletePermanently) {
			<text>
				<div class="sidebar-section collapsible-sidebar-section">
					<a href="/" class="sidebar-section-title">üóëÔ∏è Deleted Items</a>
				</div>
			</text>
		}
	</div>
}

@if (Model.Thumbnails.Count == 0) {
	<text>
		<div class="no-photos">No photos were found. Select a different date from the sidebar.</div>
	</text>
} else {
	<text>
		<section class="photo-date" id="photo-list">
			<div class="photo-thumbnails" id="thumbnails">
				@foreach (var thumbnail in Model.Thumbnails) {
					<text>
						<div class="photo-thumbnail"
							id="@thumbnail.Id"
							data-background-url="@thumbnail.ThumbnailUrl"
							data-fullsize-url="@Url.Action("FullSize", "Photos", new {
								familyId = Model.FamilyId,
								filename = thumbnail.Filename,
							})"
						>
							<label for="Select_@thumbnail.Id" class="photo-blocker"></label>

							<input type="checkbox" id="Select_@thumbnail.Id" data-id="@thumbnail.Filename" class="photo-thumbnail-select" />
						</div>
					</text>
				}
			</div>
		</section>

		<section class="photo-viewer" id="photo-viewer">
			<img class="photo-viewer-image" id="photo-viewer-image" fetchpriority="high" />

			<div class="photo-viewer-adjacent photo-viewer-prev" id="prev-photo">&lt;</div>

			<div class="photo-viewer-adjacent photo-viewer-next" id="next-photo">&gt;</div>

			<div id="close-photo-viewer" class="close-photo-viewer">x</div>
		</section>
	</text>
}

@section Footer {
	<div class="footer-left" id="photo-list-footer-left">
		<button class="requires-no-selection-mobile" id="enable-selection">‚òëÔ∏è Select</button>
		<button class="requires-selection-mobile" id="disable-selection">‚ùå Cancel</button>
		<button class="select-all hide-if-disabled" id="unselect-all">‚òê Clear All</button>
		<button class="select-all hide-if-disabled" id="select-all">‚òëÔ∏è Select All</button>
		@*<button class="requires-selection" id="download-photos">üíæ <span class="hide-on-mobile">&nbsp;Download</span></button>*@

		@if (Model.CanDelete) {
			<text>
				<button class="requires-selection" id="delete-photos">üóëÔ∏è <span class="hide-on-mobile">&nbsp;Delete</span></button>
			</text>
		}
	</div>

	<div class="footer-right" id="photo-list-footer-right">
		<button class="zoom-button" id="zoom-minus">-</button>
		<div class="hide-on-mobile zoom-label">Zoom</div>
		<button class="zoom-button" id="zoom-plus">+</button>
	</div>

	<div class="footer-left" id="photo-viewer-footer-left">
		<a id="photo-viewer-download-button">
			<button type="button">üíæ Download</button>
		</a>

		@if (Model.CanDelete) {
			<text>
				<button type="button" id="photo-viewer-delete-button">üóëÔ∏è Delete</button>
			</text>
		}
	</div>
}

@section Scripts {
	<script>
		window.photoList = (function() {
			thumbnails.render();

			document.getElementById("select-all").addEventListener("click", function() {
				multiSelect.selectAll();
			});

			document.getElementById("unselect-all").addEventListener("click", function() {
				multiSelect.clearAll();
			});

			document.getElementById("delete-photos")?.addEventListener("click", function() {
				deletePhotos(null, false);
			});

			function deletePhotos(fileIds, permanent) {
				fileIds = fileIds || multiSelect.getSelectedFiles();

				let photoCount = fileIds.length,
					s = photoCount > 1 ? "s" : "";

				if (confirm(photoCount + " photo" + s + " will be deleted. Are you sure you want to continue?")) {
					fetch("@deleteUrl", {
						method: "PUT",
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({
							fileIds: fileIds || multiSelect.getSelectedFiles(),
							deletePermanently: permanent
						})
					});

					clearSelectedFiles();
					return true;
				}

				return false;
			}

			function clearSelectedFiles() {
				let $checkboxes = multiSelect.getSelectedCheckboxes();

				for (let i = 0; i < $checkboxes.length; i++) {
					clearSelectedFile($checkboxes[i]);
				}

				multiSelect.update();
			}

			function clearSelectedFile($checkbox) {
				let $photo = $checkbox.parentElement;

				$photo.parentElement.removeChild($photo);
			}

			return {
				deletePhotos: deletePhotos
			}
		})();
	</script>
}